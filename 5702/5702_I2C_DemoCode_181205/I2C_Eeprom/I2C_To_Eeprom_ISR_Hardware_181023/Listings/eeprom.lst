C51 COMPILER V9.54   EEPROM                                                                12/05/2018 13:26:02 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Src\eeprom.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\eeprom.lst) TABS(2) OBJECT(.\Objects\eeprom.obj)

line level    source

   1          #include "eeprom.h"
   2          #include "string.h"
   3          /************************************************************************************************
   4          Function:   delay time (ms)
   5          input:      cTemp
   6          Output:     None
   7          Return:     None
   8          *************************************************************************************************/
   9          void delay_ms (uint8_t cTemp)
  10          {
  11   1        uint8_t cCnt,cK;
  12   1        for(;cTemp > 0;cTemp--)
  13   1        {
  14   2          for(cCnt = 245;cCnt > 0;cCnt--)
  15   2          {
  16   3            WDTR = 0x5A;                  // Clear Watch Dog
  17   3            for(cK = 24;cK > 0;cK--)
  18   3            {
  19   4              _nop_();
  20   4            }
  21   3          }
  22   2        }
  23   1      } 
  24          /*********************************************************************************************************
             -********
  25          Function:   Eeprom Page Write
  26          input:      cDevAddr,cWrDataAddr,p_cWrDataBuf,cNumByteToWrite
  27          Output:     None
  28          Return:     None 
  29          **********************************************************************************************************
             -********/
  30          void eeprom_write_page(uint8_t cDevAddr,uint16_t cWrDataAddr, uint8_t * p_cWrDataBuf, uint8_t cNumByteToWr
             -ite)
  31          { 
  32   1        if(f_bI2cFlag == 0)
  33   1        {
  34   2          if(cNumByteToWrite == 0)    
  35   2          {
  36   3           return ;                                         // error Size
  37   3          }
  38   2      
  39   2          f_bI2cRx = 0;                                     // Clear Flag
  40   2          f_bI2cFlag = 1;                                   // get Use Right 
  41   2          
  42   2          g_cDataAddr = cWrDataAddr;                        // Data Address
  43   2          g_cDevAddr = (cDevAddr & 0xFE) | EEPROM_WRITE;    // Device Write Address   
  44   2          
  45   2          g_cI2cDataLen = cNumByteToWrite;                  // Data Length  
  46   2          
  47   2          memcpy(g_cI2cDataBuf, p_cWrDataBuf, cNumByteToWrite);
  48   2          
  49   2          I2CCON &= 0xF7;                                   // Clear I2C flag 
  50   2          I2CCON |= 0x20;                                   // START (STA) = 1
  51   2        }
C51 COMPILER V9.54   EEPROM                                                                12/05/2018 13:26:02 PAGE 2   

  52   1      }
  53          /*********************************************************************************************************
             -**********
  54          Function:   Eeprom Write N Byte
  55          input:      cDevAddr,cWrDataAddr,p_cWrDataBuf,cNumByteToWrite
  56          Output:     None
  57          Return:     None
  58          **********************************************************************************************************
             -*********/
  59          void eeprom_write_n_byte(uint8_t cDevAddr,uint16_t cWrDataAddr, uint8_t * p_cWrDataBuf, uint8_t cNumByteTo
             -Write)
  60          { 
  61   1        uint8_t cPageRemain;
  62   1        uint16_t cPageAdrOff;
  63   1        
  64   1        if (cNumByteToWrite == 0)    
  65   1        {
  66   2            return ;                                                                    // error size
  67   2        }
  68   1      
  69   1        cPageAdrOff = cWrDataAddr % PAGE_SIZE;                                        // The offset address of the starting address
  70   1        cPageRemain = PAGE_SIZE - cPageAdrOff;                                        // The remaining capacity of the page
  71   1        
  72   1        if(cPageRemain > cNumByteToWrite)                     
  73   1          cPageRemain = cNumByteToWrite;  
  74   1        
  75   1        while(1)
  76   1        {
  77   2          eeprom_write_page(cDevAddr, cWrDataAddr, p_cWrDataBuf, cPageRemain);        // write page
  78   2          if(wait_finish() == ERR)                                                    // Wait finish
  79   2          {
  80   3            return ;
  81   3          }       
  82   2          
  83   2          if(cPageRemain == cNumByteToWrite)                                          
  84   2          { 
  85   3            break;                                                                    // Over
  86   3          }
  87   2          else
  88   2          {
  89   3            delay_ms(5);                                                              // Self-Timed Write Cycle (5 ms typical)
  90   3            p_cWrDataBuf += cPageRemain;                                              // The remaining capacity 
  91   3            cWrDataAddr += cPageRemain;                                               // write addr
  92   3            cNumByteToWrite -= cPageRemain;                                           // write Data Number
  93   3            
  94   3            if(cNumByteToWrite > PAGE_SIZE)                                           // next page can't finish
  95   3              cPageRemain = PAGE_SIZE;
  96   3            else
  97   3              cPageRemain = cNumByteToWrite;                                          // next page can finish   
  98   3          }
  99   2        }                           
 100   1      }
 101          /*********************************************************************************************************
             -******
 102          Function:   Eeprom Write N Byte
 103          input:      cDevAddr,cWrDataAddr,p_cWrDataBuf,cNumByteToWrite
 104          Output:     None
 105          Return:     None
 106          **********************************************************************************************************
             -******/
 107          void eeprom_read_n_byte(uint8_t cDevAddr,uint16_t cRdDataAddr, uint8_t * p_cRdDataBuf, uint8_t cNumByteToR
             -ead)
C51 COMPILER V9.54   EEPROM                                                                12/05/2018 13:26:02 PAGE 3   

 108          {
 109   1        if(f_bI2cFlag == 0)
 110   1        {
 111   2          if(cNumByteToRead == 0)    
 112   2          {
 113   3           return ;                                       
 114   3          }                                               // error Size
 115   2          
 116   2          f_bI2cRx = 1;
 117   2          f_bI2cFlag = 1;                                 // get Use Right
 118   2          
 119   2          g_cDataAddr = cRdDataAddr;                      // Data Address
 120   2          g_cDevAddr = (cDevAddr & 0xFE) | EEPROM_WRITE;  // Device Write Address  
 121   2          
 122   2          g_cI2cDataLen = cNumByteToRead - 1;             // Data Length 
 123   2          
 124   2          I2CCON &= 0xF7;                                 // Clear I2C flag 
 125   2          I2CCON |= 0x20;                                 // START = 1
 126   2          
 127   2          if(wait_finish() == ERR)                        // Wait finish
 128   2          {
 129   3            return ;
 130   3          }                               
 131   2          
 132   2          memcpy(p_cRdDataBuf, g_cI2cDataBuf, cNumByteToRead); // Read Over 
 133   2        }
 134   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    238    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
